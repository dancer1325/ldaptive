--- core/src/main/java/org/ldaptive/AddRequest.java
+++ core/src/main/java/org/ldaptive/AddRequest.java
@@ -68,1 +68,1 @@
-    attributes = attrs.toArray(LdapAttribute[]::new);
+    attributes = attrs.toArray(new LdapAttribute[attrs.size()]);
@@ -111,1 +111,2 @@
-                    OctetStringType::new).toArray(DEREncoder[]::new)))).toArray(DEREncoder[]::new))),
+                    OctetStringType::new).toArray(
+                      size -> new DEREncoder[size])))).toArray(size -> new DEREncoder[size]))),
@@ -194,1 +194,1 @@
-      object.attributes = attrs.toArray(LdapAttribute[]::new);
+      object.attributes = attrs.toArray(new LdapAttribute[attrs.size()]);
--- core/src/main/java/org/ldaptive/DnsSrvConnectionStrategy.java
+++ core/src/main/java/org/ldaptive/DnsSrvConnectionStrategy.java
@@ -11,1 +11,0 @@
-import java.util.Objects;
@@ -145,4 +145,5 @@
-        dnsResolvers.put(
-          new SRVDNSResolver(
-            Objects.requireNonNullElseGet(dnsContextFactory, () -> new DefaultDNSContextFactory(dnsUrl[0])), useSSL),
-          dnsUrl[1]);
+        if (dnsContextFactory == null) {
+          dnsResolvers.put(new SRVDNSResolver(new DefaultDNSContextFactory(dnsUrl[0]), useSSL), dnsUrl[1]);
+        } else {
+          dnsResolvers.put(new SRVDNSResolver(dnsContextFactory, useSSL), dnsUrl[1]);
+        }
--- core/src/main/java/org/ldaptive/LdapAttribute.java
+++ core/src/main/java/org/ldaptive/LdapAttribute.java
@@ -210,1 +210,1 @@
-        return IntStream.range(1, split.length).mapToObj(i -> split[i]).collect(Collectors.toUnmodifiableList());
+        return IntStream.range(1, split.length).mapToObj(i -> split[i]).collect(Collectors.toList());
@@ -238,1 +238,1 @@
-    return attributeValues.stream().map(ByteBuffer::array).collect(Collectors.toUnmodifiableList());
+    return attributeValues.stream().map(ByteBuffer::array).collect(Collectors.toList());
@@ -273,1 +273,1 @@
-    }).collect(Collectors.toUnmodifiableList());
+    }).collect(Collectors.toList());
@@ -304,1 +304,1 @@
-      .map(func).collect(Collectors.toUnmodifiableList());
+      .map(func).collect(Collectors.toList());
--- core/src/main/java/org/ldaptive/LdapEntry.java
+++ core/src/main/java/org/ldaptive/LdapEntry.java
@@ -358,1 +358,1 @@
-    return mods.toArray(AttributeModification[]::new);
+    return mods.stream().toArray(size -> new AttributeModification[size]);
@@ -408,1 +408,1 @@
-      if (p.getName().isEmpty()) {
+      if (!p.getName().isPresent()) {
@@ -411,1 +411,1 @@
-      if (p.getValues().isEmpty()) {
+      if (!p.getValues().isPresent()) {
--- core/src/main/java/org/ldaptive/LdapUtils.java
+++ core/src/main/java/org/ldaptive/LdapUtils.java
@@ -419,1 +419,1 @@
-    try (is; data) {
+    try {
@@ -424,0 +424,3 @@
+    } finally {
+      data.close();
+      is.close();
--- core/src/main/java/org/ldaptive/ModifyRequest.java
+++ core/src/main/java/org/ldaptive/ModifyRequest.java
@@ -116,1 +116,1 @@
-            .toArray(DEREncoder[]::new))),
+            .toArray(size -> new DEREncoder[size]))),
@@ -133,1 +133,1 @@
-    return values.stream().map(OctetStringType::new).toArray(DEREncoder[]::new);
+    return values.stream().map(OctetStringType::new).toArray(size -> new DEREncoder[size]);
@@ -215,1 +215,1 @@
-      object.modifications = mod.toArray(AttributeModification[]::new);
+      object.modifications = mod.stream().toArray(size -> new AttributeModification[size]);
--- core/src/main/java/org/ldaptive/PooledConnectionFactory.java
+++ core/src/main/java/org/ldaptive/PooledConnectionFactory.java
@@ -358,2 +358,8 @@
-      this((count, time) ->
-        count <= getMaxPoolSize() + 1 && !getBlockWaitTime().minus(Duration.between(time, Instant.now())).isNegative());
+      this(new BiPredicate<Integer, Instant>() {
+        @Override
+        public boolean test(final Integer count, final Instant time)
+        {
+          return count <= getMaxPoolSize() + 1 &&
+                 !getBlockWaitTime().minus(Duration.between(time, Instant.now())).isNegative();
+        }
+      });
--- core/src/main/java/org/ldaptive/RandomConnectionStrategy.java
+++ core/src/main/java/org/ldaptive/RandomConnectionStrategy.java
@@ -27,1 +27,1 @@
-    return new Iterator<>() {
+    return new Iterator<LdapURL>() {
--- core/src/main/java/org/ldaptive/SearchRequest.java
+++ core/src/main/java/org/ldaptive/SearchRequest.java
@@ -503,1 +503,1 @@
-          Stream.of(returnAttributes).map(OctetStringType::new).toArray(DEREncoder[]::new))),
+          Stream.of(returnAttributes).map(OctetStringType::new).toArray(size -> new DEREncoder[size]))),
@@ -893,1 +893,1 @@
-      object.setReturnAttributes(attributes.toArray(String[]::new));
+      object.setReturnAttributes(attributes.stream().toArray(size -> new String[size]));
@@ -921,1 +921,1 @@
-      object.setBinaryAttributes(attributes.toArray(String[]::new));
+      object.setBinaryAttributes(attributes.stream().toArray(size -> new String[size]));
--- core/src/main/java/org/ldaptive/asn1/ConstructedDEREncoder.java
+++ core/src/main/java/org/ldaptive/asn1/ConstructedDEREncoder.java
@@ -43,1 +42,1 @@
-      try (bytes) {
+      try {
@@ -46,0 +46,2 @@
+      } finally {
+        bytes.close();
--- core/src/main/java/org/ldaptive/control/util/SyncReplRunner.java
+++ core/src/main/java/org/ldaptive/control/util/SyncReplRunner.java
@@ -56,1 +56,1 @@
-  private final Consumer<Exception> onException = new Consumer<>() {
+  private final Consumer<Exception> onException = new Consumer<Exception>() {
--- core/src/main/java/org/ldaptive/ext/MergeOperation.java
+++ core/src/main/java/org/ldaptive/ext/MergeOperation.java
@@ -310,1 +310,1 @@
-              .modifications(batch.toArray(AttributeModification[]::new))
+              .modifications(batch.stream().toArray(size -> new AttributeModification[size]))
--- core/src/main/java/org/ldaptive/extended/PasswordModifyRequest.java
+++ core/src/main/java/org/ldaptive/extended/PasswordModifyRequest.java
@@ -84,1 +84,1 @@
-      l.toArray(DEREncoder[]::new));
+      l.stream().toArray(size -> new DEREncoder[size]));
--- core/src/main/java/org/ldaptive/filter/DefaultFilterFunction.java
+++ core/src/main/java/org/ldaptive/filter/DefaultFilterFunction.java
@@ -66,1 +66,1 @@
-    filterBuffer = filterBuffer.limit(filterBuffer.limit() - 1).slice();
+    filterBuffer = ((CharBuffer) filterBuffer.limit(filterBuffer.limit() - 1)).slice();
@@ -95,1 +95,1 @@
-              filterBuffer.position(filterBuffer.position() - 1).slice());
+              ((CharBuffer) filterBuffer.position(filterBuffer.position() - 1)).slice());
@@ -103,1 +103,1 @@
-            filterBuffer.position(filterBuffer.position() - 1).slice());
+            ((CharBuffer) filterBuffer.position(filterBuffer.position() - 1)).slice());
@@ -180,1 +180,1 @@
-    final CharBuffer slice = cb.flip().slice();
+    final CharBuffer slice = ((CharBuffer) cb.flip()).slice();
@@ -263,1 +263,1 @@
-            buffers.get("ANY").add(cb.limit(pos - 1).reset().slice());
+            buffers.get("ANY").add(((CharBuffer) cb.limit(pos - 1).reset()).slice());
@@ -265,1 +265,1 @@
-            buffers.put("INITIAL", Collections.singletonList(cb.limit(pos - 1).reset().slice()));
+            buffers.put("INITIAL", Collections.singletonList(((CharBuffer) cb.limit(pos - 1).reset()).slice()));
@@ -317,1 +317,1 @@
-          remainingFilter = remainingFilter.position(remainingFilter.position() - 1).slice();
+          remainingFilter = ((CharBuffer) remainingFilter.position(remainingFilter.position() - 1)).slice();
@@ -356,1 +356,1 @@
-        final CharBuffer slice = cb.flip().slice();
+        final CharBuffer slice = ((CharBuffer) cb.flip()).slice();
--- core/src/main/java/org/ldaptive/pool/PooledConnectionStatistics.java
+++ core/src/main/java/org/ldaptive/pool/PooledConnectionStatistics.java
@@ -35,1 +35,1 @@
-    availableStats = new LinkedList<>() {
+    availableStats = new LinkedList<Instant>() {
@@ -52,1 +52,1 @@
-    activeStats = new LinkedList<>() {
+    activeStats = new LinkedList<Instant>() {
--- core/src/main/java/org/ldaptive/props/AbstractPropertySource.java
+++ core/src/main/java/org/ldaptive/props/AbstractPropertySource.java
@@ -93,1 +93,1 @@
-        try (r) {
+        try {
@@ -94,0 +94,2 @@
+        } finally {
+          r.close();
--- core/src/main/java/org/ldaptive/schema/AbstractDefaultDefinitionFunction.java
+++ core/src/main/java/org/ldaptive/schema/AbstractDefaultDefinitionFunction.java
@@ -47,1 +47,1 @@
-    buffer = buffer.limit(buffer.limit() - 1).slice();
+    buffer = ((CharBuffer) buffer.limit(buffer.limit() - 1)).slice();
@@ -85,1 +85,1 @@
-      return new String[] {readOID(cb.position(cb.position() - 1))};
+      return new String[] {readOID((CharBuffer) cb.position(cb.position() - 1))};
@@ -98,1 +98,1 @@
-    final CharBuffer slice = cb.limit(endPos).position(startPos).slice();
+    final CharBuffer slice = ((CharBuffer) cb.limit(endPos).position(startPos)).slice();
@@ -137,1 +137,1 @@
-      return new int[] {readRuleID(cb.position(cb.position() - 1))};
+      return new int[] {readRuleID((CharBuffer) cb.position(cb.position() - 1))};
@@ -150,1 +150,1 @@
-    final CharBuffer slice = cb.limit(endPos).position(startPos).slice();
+    final CharBuffer slice = ((CharBuffer) cb.limit(endPos).position(startPos)).slice();
@@ -188,1 +188,1 @@
-    final CharBuffer slice = cb.limit(endPos).position(startPos).slice();
+    final CharBuffer slice = ((CharBuffer) cb.limit(endPos).position(startPos)).slice();
@@ -210,1 +210,1 @@
-      return new String[] {readQDString(cb.position(cb.position() - 1))};
+      return new String[] {readQDString((CharBuffer) cb.position(cb.position() - 1))};
@@ -231,1 +231,1 @@
-        final CharBuffer slice = cb.limit(endPos).position(startValue).slice();
+        final CharBuffer slice = ((CharBuffer) cb.limit(endPos).position(startValue)).slice();
@@ -263,1 +263,1 @@
-    final CharBuffer slice = cb.limit(endPos).position(startPos).slice();
+    final CharBuffer slice = ((CharBuffer) cb.limit(endPos).position(startPos)).slice();
--- core/src/main/java/org/ldaptive/schema/AttributeType.java
+++ core/src/main/java/org/ldaptive/schema/AttributeType.java
@@ -6,1 +6,0 @@
-import java.util.List;
@@ -580,1 +580,1 @@
-          exts.addExtension(token, List.of(readQDStrings(buffer)));
+          exts.addExtension(token, Arrays.asList(readQDStrings(buffer)));
--- core/src/main/java/org/ldaptive/schema/DITContentRule.java
+++ core/src/main/java/org/ldaptive/schema/DITContentRule.java
@@ -6,1 +6,0 @@
-import java.util.List;
@@ -359,1 +359,1 @@
-          exts.addExtension(token, List.of(readQDStrings(buffer)));
+          exts.addExtension(token, Arrays.asList(readQDStrings(buffer)));
--- core/src/main/java/org/ldaptive/schema/DITStructureRule.java
+++ core/src/main/java/org/ldaptive/schema/DITStructureRule.java
@@ -6,1 +6,0 @@
-import java.util.List;
@@ -279,1 +279,1 @@
-          exts.addExtension(token, List.of(readQDStrings(buffer)));
+          exts.addExtension(token, Arrays.asList(readQDStrings(buffer)));
--- core/src/main/java/org/ldaptive/schema/MatchingRule.java
+++ core/src/main/java/org/ldaptive/schema/MatchingRule.java
@@ -6,1 +6,0 @@
-import java.util.List;
@@ -241,1 +241,1 @@
-          exts.addExtension(token, List.of(readQDStrings(buffer)));
+          exts.addExtension(token, Arrays.asList(readQDStrings(buffer)));
--- core/src/main/java/org/ldaptive/schema/MatchingRuleUse.java
+++ core/src/main/java/org/ldaptive/schema/MatchingRuleUse.java
@@ -6,1 +6,0 @@
-import java.util.List;
@@ -242,1 +242,1 @@
-          exts.addExtension(token, List.of(readQDStrings(buffer)));
+          exts.addExtension(token, Arrays.asList(readQDStrings(buffer)));
--- core/src/main/java/org/ldaptive/schema/NameForm.java
+++ core/src/main/java/org/ldaptive/schema/NameForm.java
@@ -6,1 +6,0 @@
-import java.util.List;
@@ -319,1 +319,1 @@
-          exts.addExtension(token, List.of(readQDStrings(buffer)));
+          exts.addExtension(token, Arrays.asList(readQDStrings(buffer)));
--- core/src/main/java/org/ldaptive/schema/ObjectClass.java
+++ core/src/main/java/org/ldaptive/schema/ObjectClass.java
@@ -6,1 +6,0 @@
-import java.util.List;
@@ -364,1 +364,1 @@
-          exts.addExtension(token, List.of(readQDStrings(buffer)));
+          exts.addExtension(token, Arrays.asList(readQDStrings(buffer)));
--- core/src/main/java/org/ldaptive/schema/Syntax.java
+++ core/src/main/java/org/ldaptive/schema/Syntax.java
@@ -5,1 +5,1 @@
-import java.util.List;
+import java.util.Arrays;
@@ -168,1 +168,1 @@
-          exts.addExtension(token, List.of(readQDStrings(buffer)));
+          exts.addExtension(token, Arrays.asList(readQDStrings(buffer)));
--- core/src/main/java/org/ldaptive/transport/netty/HandleMap.java
+++ core/src/main/java/org/ldaptive/transport/netty/HandleMap.java
@@ -192,1 +192,1 @@
-        if (!throttle.tryAcquire(THROTTLE_TIMEOUT.toSeconds(), TimeUnit.SECONDS)) {
+        if (!throttle.tryAcquire(THROTTLE_TIMEOUT.getSeconds(), TimeUnit.SECONDS)) {
--- core/src/main/java/org/ldaptive/dn/RDn.java
+++ core/src/main/java/org/ldaptive/dn/RDn.java
@@ -100,1 +100,1 @@
-    nameValues = Set.of(new NameValue(attributeName, attributeValue));
+    nameValues = Collections.singleton(new NameValue(attributeName, attributeValue));
--- core/src/test/java/org/ldaptive/LdapEntryTest.java
+++ core/src/test/java/org/ldaptive/LdapEntryTest.java
@@ -190,1 +190,1 @@
-    final LdapAttribute[] attrs = le.getAttributes().toArray(LdapAttribute[]::new);
+    final LdapAttribute[] attrs = le.getAttributes().toArray(new LdapAttribute[le.getAttributes().size()]);
--- core/src/test/java/org/ldaptive/RandomConnectionStrategyTest.java
+++ core/src/test/java/org/ldaptive/RandomConnectionStrategyTest.java
@@ -135,1 +135,1 @@
-    conn.setOpenPredicate(new Predicate<>() {
+    conn.setOpenPredicate(new Predicate<LdapURL>() {
@@ -186,1 +186,1 @@
-    conn.setOpenPredicate(new Predicate<>() {
+    conn.setOpenPredicate(new Predicate<LdapURL>() {
--- core/src/test/java/org/ldaptive/SearchResponseTest.java
+++ core/src/test/java/org/ldaptive/SearchResponseTest.java
@@ -362,1 +362,1 @@
-    final LdapEntry[] entries = sr.getEntries().toArray(LdapEntry[]::new);
+    final LdapEntry[] entries = sr.getEntries().toArray(new LdapEntry[sr.entrySize()]);
--- core/src/test/java/org/ldaptive/LdapAttributeTest.java
+++ core/src/test/java/org/ldaptive/LdapAttributeTest.java
@@ -262,1 +262,1 @@
-    la.addStringValues(List.of("Williams", "Brown"));
+    la.addStringValues(Arrays.asList("Williams", "Brown"));
@@ -268,1 +268,1 @@
-    la.removeStringValues(List.of("Williams", "Brown"));
+    la.removeStringValues(Arrays.asList("Williams", "Brown"));
@@ -282,1 +282,1 @@
-    la.addBinaryValues(List.of("image3".getBytes(), "image4".getBytes()));
+    la.addBinaryValues(Arrays.asList("image3".getBytes(), "image4".getBytes()));
@@ -288,1 +288,1 @@
-    la.removeBinaryValues(List.of("image3".getBytes(), "image4".getBytes()));
+    la.removeBinaryValues(Arrays.asList("image3".getBytes(), "image4".getBytes()));
@@ -302,1 +302,1 @@
-    la.addBufferValues(List.of(ByteBuffer.wrap("image3".getBytes()), ByteBuffer.wrap("image4".getBytes())));
+    la.addBufferValues(Arrays.asList(ByteBuffer.wrap("image3".getBytes()), ByteBuffer.wrap("image4".getBytes())));
@@ -308,1 +308,1 @@
-    la.removeBufferValues(List.of(ByteBuffer.wrap("image3".getBytes()), ByteBuffer.wrap("image4".getBytes())));
+    la.removeBufferValues(Arrays.asList(ByteBuffer.wrap("image3".getBytes()), ByteBuffer.wrap("image4".getBytes())));
@@ -322,1 +322,1 @@
-    la.addValues(s -> s.getBytes(StandardCharsets.UTF_8), List.of("Williams", "Brown"));
+    la.addValues(s -> s.getBytes(StandardCharsets.UTF_8), Arrays.asList("Williams", "Brown"));
@@ -328,1 +328,1 @@
-    la.removeStringValues(List.of("Williams", "Brown"));
+    la.removeStringValues(Arrays.asList("Williams", "Brown"));
